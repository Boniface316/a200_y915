import numpy as np
import cv2


def detect_red(image1,image2):
    image_gau_blur1 = cv2.GaussianBlur(image1, (1, 1), 0)
    hsv1 = cv2.cvtColor(image_gau_blur1, cv2.COLOR_BGR2HSV)
    lower_red1 = np.array([0, 200, 0])
    higher_red1 = np.array([0, 255, 255])
    red_range1 = cv2.inRange(hsv1, lower_red1, higher_red1)
    res_red1 = cv2.bitwise_and(image_gau_blur1, image_gau_blur1, mask=red_range1)
    red_s_gray1 = cv2.cvtColor(res_red1, cv2.COLOR_BGR2GRAY)
    canny_edge1 = cv2.Canny(red_s_gray1, 30, 70)
    contours1, hierarchy1 = cv2.findContours(canny_edge1,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image1, contours1, -1, (255,255,255), 1)
    (x1, y1), radius1 = cv2.minEnclosingCircle(contours1[0])
    cy,cz1 = (int(x1), int(y1))
    radius1 = int(radius1)
    cv2.circle(image1, (cy,cz1), radius1, (255, 255, 255), 2)


    image_gau_blur2 = cv2.GaussianBlur(image2, (1, 1), 0)
    hsv2 = cv2.cvtColor(image_gau_blur2, cv2.COLOR_BGR2HSV)
    lower_red2 = np.array([0, 200, 0])
    higher_red2 = np.array([0, 255, 255])
    red_range2 = cv2.inRange(hsv2, lower_red2, higher_red2)
    res_red2 = cv2.bitwise_and(image_gau_blur2, image_gau_blur2, mask=red_range2)
    red_s_gray2 = cv2.cvtColor(res_red2, cv2.COLOR_BGR2GRAY)
    canny_edge2 = cv2.Canny(red_s_gray2, 30, 70)
    contours2, hierarchy2 = cv2.findContours(canny_edge2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image2, contours2, -1, (255, 255, 255), 1)
    (x2, y2), radius2 = cv2.minEnclosingCircle(contours2[0])
    cx, cz2 = (int(x2), int(y2))
    radius2 = int(radius2)
    cv2.circle(image2, (cx, cz2), radius2, (255, 255, 255), 1)
    cv2.imshow("image1",image1)
    cv2.imshow("image2", image2)
    return np.array([cx,cy,cz1,cz2])


def detect_blue(image1,image2):
    image_gau_blur1 = cv2.GaussianBlur(image1, (1, 1), 0)
    hsv1 = cv2.cvtColor(image_gau_blur1, cv2.COLOR_BGR2HSV)
    lower_red1 = np.array([70, 0, 0])
    higher_red1 = np.array([255, 255, 255])
    red_range1 = cv2.inRange(hsv1, lower_red1, higher_red1)
    res_red1 = cv2.bitwise_and(image_gau_blur1, image_gau_blur1, mask=red_range1)
    red_s_gray1 = cv2.cvtColor(res_red1, cv2.COLOR_BGR2GRAY)
    canny_edge1 = cv2.Canny(red_s_gray1, 30, 70)
    contours1, hierarchy1 = cv2.findContours(canny_edge1,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image1, contours1, -1, (255,255,255), 1)
    (x1, y1), radius1 = cv2.minEnclosingCircle(contours1[0])
    cy,cz1 = (int(x1), int(y1))
    radius1 = int(radius1)
    cv2.circle(image1, (cy,cz1), radius1, (255, 255, 255), 2)


    image_gau_blur2 = cv2.GaussianBlur(image2, (1, 1), 0)
    hsv2 = cv2.cvtColor(image_gau_blur2, cv2.COLOR_BGR2HSV)
    lower_red2 = np.array([70, 0, 0])
    higher_red2 = np.array([255, 255, 255])
    red_range2 = cv2.inRange(hsv2, lower_red2, higher_red2)
    res_red2 = cv2.bitwise_and(image_gau_blur2, image_gau_blur2, mask=red_range2)
    red_s_gray2 = cv2.cvtColor(res_red2, cv2.COLOR_BGR2GRAY)
    canny_edge2 = cv2.Canny(red_s_gray2, 30, 70)
    contours2, hierarchy2 = cv2.findContours(canny_edge2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image2, contours2, -1, (255, 255, 255), 1)
    (x2, y2), radius2 = cv2.minEnclosingCircle(contours2[0])
    cx, cz2 = (int(x2), int(y2))
    radius2 = int(radius2)
    cv2.circle(image2, (cx, cz2), radius2, (255, 255, 255), 2)
    cv2.imshow("image1",image1)
    cv2.imshow("image2", image2)
    return np.array([cx,cy,cz1,cz2])


def detect_green(image1,image2):
    image_gau_blur1 = cv2.GaussianBlur(image1, (1, 1), 0)
    hsv1 = cv2.cvtColor(image_gau_blur1, cv2.COLOR_BGR2HSV)
    lower_red1 = np.array([55, 0, 0])
    higher_red1 = np.array([100, 255, 255])
    red_range1 = cv2.inRange(hsv1, lower_red1, higher_red1)
    res_red1 = cv2.bitwise_and(image_gau_blur1, image_gau_blur1, mask=red_range1)
    red_s_gray1 = cv2.cvtColor(res_red1, cv2.COLOR_BGR2GRAY)
    canny_edge1 = cv2.Canny(red_s_gray1, 30, 70)
    contours1, hierarchy1 = cv2.findContours(canny_edge1,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image1, contours1, -1, (255,255,255), 2)
    (x1, y1), radius1 = cv2.minEnclosingCircle(contours1[0])
    cy,cz1 = (int(x1), int(y1))
    radius1 = int(radius1)
    cv2.imshow("mask",red_range1)
    cv2.circle(image1, (cy,cz1), radius1, (255, 255, 255), 2)


    image_gau_blur2 = cv2.GaussianBlur(image2, (1, 1), 0)
    hsv2 = cv2.cvtColor(image_gau_blur2, cv2.COLOR_BGR2HSV)
    lower_red2 = np.array([55, 0, 0])
    higher_red2 = np.array([100, 255, 255])
    red_range2 = cv2.inRange(hsv2, lower_red2, higher_red2)
    res_red2 = cv2.bitwise_and(image_gau_blur2, image_gau_blur2, mask=red_range2)
    red_s_gray2 = cv2.cvtColor(res_red2, cv2.COLOR_BGR2GRAY)
    canny_edge2 = cv2.Canny(red_s_gray2, 30, 70)
    contours2, hierarchy2 = cv2.findContours(canny_edge2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image2, contours2, -1, (255, 255, 255), 2)
    (x2, y2), radius2 = cv2.minEnclosingCircle(contours2[0])
    cx, cz2 = (int(x2), int(y2))
    radius2 = int(radius2)
    cv2.circle(image2, (cx, cz2), radius2, (255, 255, 255), 2)
    cv2.imshow("image1",image1)
    cv2.imshow("image2", image2)
    return np.array([cx,cy,cz1,cz2])


def detect_yellow(image1,image2):
    image_gau_blur1 = cv2.GaussianBlur(image1, (1, 1), 0)
    hsv1 = cv2.cvtColor(image_gau_blur1, cv2.COLOR_BGR2HSV)
    lower_red1 = np.array([16, 244, 0])
    higher_red1 = np.array([51, 255, 255])
    red_range1 = cv2.inRange(hsv1, lower_red1, higher_red1)
    res_red1 = cv2.bitwise_and(image_gau_blur1, image_gau_blur1, mask=red_range1)
    red_s_gray1 = cv2.cvtColor(res_red1, cv2.COLOR_BGR2GRAY)
    canny_edge1 = cv2.Canny(red_s_gray1, 30, 70)
    contours1, hierarchy1 = cv2.findContours(canny_edge1,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image1, contours1, -1, (255,255,255), 1)
    (x1, y1), radius1 = cv2.minEnclosingCircle(contours1[0])
    cy,cz1 = (int(x1), int(y1))
    radius1 = int(radius1)
    cv2.circle(image1, (cy,cz1), radius1, (255, 255, 255), 2)


    image_gau_blur2 = cv2.GaussianBlur(image2, (1, 1), 0)
    hsv2 = cv2.cvtColor(image_gau_blur2, cv2.COLOR_BGR2HSV)
    lower_red2 = np.array([16, 244, 0])
    higher_red2 = np.array([51, 255, 255])
    red_range2 = cv2.inRange(hsv2, lower_red2, higher_red2)
    res_red2 = cv2.bitwise_and(image_gau_blur2, image_gau_blur2, mask=red_range2)
    red_s_gray2 = cv2.cvtColor(res_red2, cv2.COLOR_BGR2GRAY)
    canny_edge2 = cv2.Canny(red_s_gray2, 30, 70)
    contours2, hierarchy2 = cv2.findContours(canny_edge2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(image2, contours2, -1, (255, 255, 255), 1)
    (x2, y2), radius2 = cv2.minEnclosingCircle(contours2[0])
    cx, cz2 = (int(x2), int(y2))
    radius2 = int(radius2)
    cv2.circle(image2, (cx, cz2), radius2, (255, 255, 255), 2)
    cv2.imshow("image1",image1)
    cv2.imshow("image2", image2)
    return np.array([cx,cy,cz1,cz2])


image1 = cv2.imread("p2_c1.png")
image2 = cv2.imread("p2_c2.png")
print("yellow",detect_yellow(image1,image2))
print("blue",detect_blue(image1,image2))
print("green",detect_green(image1,image2))
print("Red",detect_red(image1,image2))



k=cv2.waitKey(0) & 0xFF
if k==27:
    cv2.destroyAllWindows()
elif k==ord("s"):
    cv2.destroyAllWindows()